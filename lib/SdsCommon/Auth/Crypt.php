<?php
/**
 * @link       http://superdweebie.com
 * @package    Sds
 * @license    MIT
 */
namespace SdsCommon\Auth;

/**
 *
 * @since   1.0
 * @author  Tim Roediger <superdweebie@gmail.com>
 *
 * @ODM\EmbeddedDocument
 */
class Crypt {
        
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';    
    
    const saltLength = 50;
        
    /**
     * Creates a sha1 hash of a string using two salts, and attatches those salts
     * to the return string
     * 
     * @param string $plaintext
     * @param string $preSalt
     * @param string $postSalt
     * @return string
     */
    public static function encrypt($plaintext, $preSalt, $postSalt){
        return $preSalt.sha1($preSalt.$plaintext.$postSalt).$postSalt;
    }
    
    /**
     * Extracts the salts from a string previously generated by self::encrypt, and 
     * uses the same salts to encrypt the plaintext
     * 
     * @param \SdsCommon\Auth\AuthInterface $identity
     * @param string $plaintext
     * @return string
     */
    public static function hashPassword(AuthInterface $identity, $plaintext){               
        $dbPassword = $identity->getPassword();
        $preSalt = substr($dbPassword, 0, self::saltLength);
        $postSalt = substr($dbPassword, strlen($dbPassword) -  self::saltLength,  self::saltLength);
        return self::encrypt($plaintext, $preSalt, $postSalt);
    }
    
    /**
     * Generates a random string
     * 
     * @return string
     */
    public static function generateSalt(){
        return substr(str_shuffle(str_repeat(self::chars,10)),0,self::saltLength);        
    }
}

